#!/bin/bash

# ÂêéÁ´ØÊ∫ê‰ª£Á†ÅÊãºÊé•ËÑöÊú¨ (ShellÁâàÊú¨)
# Â∞Ü output_sourcecode/backend/ ÁõÆÂΩï‰∏ãÊâÄÊúâJavaÊñá‰ª∂ÂèäÈÖçÁΩÆÊñá‰ª∂ÂÜÖÂÆπÊãºÊé•ÁîüÊàêÁªü‰∏ÄÁöÑÂêéÁ´ØÊ∫ê‰ª£Á†ÅÊñáÊ°£

# ËÆæÁΩÆËÑöÊú¨ÁõÆÂΩï
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"  # ÂõûÂà∞È°πÁõÆÊ†πÁõÆÂΩï
BACKEND_DIR="${SCRIPT_DIR}/output_sourcecode/backend"
OUTPUT_DIR="${SCRIPT_DIR}/output_docs"
OUTPUT_FILE="${OUTPUT_DIR}/ÂêéÁ´ØÊ∫ê‰ª£Á†Å.txt"

# Á°Æ‰øùËæìÂá∫ÁõÆÂΩïÂ≠òÂú®
mkdir -p "${OUTPUT_DIR}"

# Ê£ÄÊü•ÂêéÁ´ØÁõÆÂΩïÊòØÂê¶Â≠òÂú®
if [ ! -d "${BACKEND_DIR}" ]; then
    echo "‚ùå ÈîôËØØÔºöÂêéÁ´ØÁõÆÂΩï‰∏çÂ≠òÂú® ${BACKEND_DIR}"
    exit 1
fi

# Ëé∑ÂèñÂêéÁ´ØÊñá‰ª∂ÂàóË°®ÔºàÊåâÁ±ªÂûã‰ºòÂÖàÁ∫ßÊéíÂ∫èÔºâ
get_backend_files() {
    local files=()
    
    # ‰ºòÂÖàÁ∫ßÊñá‰ª∂È°∫Â∫è
    # 1. pom.xml
    find "${BACKEND_DIR}" -name "pom.xml" -type f | while read file; do
        echo "1:$file"
    done
    
    # 2. ÈÖçÁΩÆÊñá‰ª∂
    find "${BACKEND_DIR}" -name "*.yml" -o -name "*.yaml" -o -name "*.properties" | while read file; do
        echo "2:$file"
    done
    
    # 3. Application.java
    find "${BACKEND_DIR}" -name "Application.java" -type f | while read file; do
        echo "3:$file"
    done
    
    # 4. EntityÁ±ª
    find "${BACKEND_DIR}" -path "*/entity/*" -name "*.java" -type f | while read file; do
        echo "4:$file"
    done
    
    # 5. MapperÁ±ª
    find "${BACKEND_DIR}" -path "*/mapper/*" -name "*.java" -type f | while read file; do
        echo "5:$file"
    done
    
    # 6. ServiceÁ±ª
    find "${BACKEND_DIR}" -path "*/service/*" -name "*.java" -type f | while read file; do
        echo "6:$file"
    done
    
    # 7. ControllerÁ±ª
    find "${BACKEND_DIR}" -path "*/controller/*" -name "*.java" -type f | while read file; do
        echo "7:$file"
    done
    
    # 8. DTOÁ±ª
    find "${BACKEND_DIR}" -path "*/dto/*" -name "*.java" -type f | while read file; do
        echo "8:$file"
    done
    
    # 9. VOÁ±ª
    find "${BACKEND_DIR}" -path "*/vo/*" -name "*.java" -type f | while read file; do
        echo "9:$file"
    done
    
    # 10. ÂÖ∂‰ªñJavaÊñá‰ª∂
    find "${BACKEND_DIR}" -name "*.java" -type f | while read file; do
        # ÊéíÈô§Â∑≤ÁªèÂ§ÑÁêÜÁöÑÊñá‰ª∂
        if [[ ! "$file" =~ /entity/ ]] && [[ ! "$file" =~ /mapper/ ]] && [[ ! "$file" =~ /service/ ]] && [[ ! "$file" =~ /controller/ ]] && [[ ! "$file" =~ /dto/ ]] && [[ ! "$file" =~ /vo/ ]] && [[ ! "$file" =~ Application.java ]]; then
            echo "10:$file"
        fi
    done
}

# Ëé∑ÂèñÊéíÂ∫èÂêéÁöÑÊñá‰ª∂ÂàóË°®
BACKEND_FILES=($(get_backend_files | sort -t: -k1,1n -k2,2 | cut -d: -f2-))

if [ ${#BACKEND_FILES[@]} -eq 0 ]; then
    echo "‚ùå ÈîôËØØÔºöÂú® ${BACKEND_DIR} ÁõÆÂΩï‰∏ãÊ≤°ÊúâÊâæÂà∞ÂêéÁ´ØÊ∫ê‰ª£Á†ÅÊñá‰ª∂"
    exit 1
fi

echo "============================================================"
echo "ÂêéÁ´ØÊ∫ê‰ª£Á†ÅÁîüÊàêËÑöÊú¨ (Áî®‰∫éAIÂàÜÊûêÂíå‰ª£Á†ÅÂÆ°Êü•)"
echo "============================================================"
echo "ÊâæÂà∞ ${#BACKEND_FILES[@]} ‰∏™ÂêéÁ´ØÊ∫ê‰ª£Á†ÅÊñá‰ª∂:"

for file in "${BACKEND_FILES[@]}"; do
    rel_path=$(realpath --relative-to="${BACKEND_DIR}" "$file" 2>/dev/null || python -c "import os; print(os.path.relpath('$file', '${BACKEND_DIR}'))")
    echo "  - ${rel_path}"
done

echo ""
echo "ÂºÄÂßãÁîüÊàêÂêéÁ´ØÊ∫ê‰ª£Á†ÅÊñáÊ°£..."

# Ê∏ÖÁ©∫ËæìÂá∫Êñá‰ª∂
> "${OUTPUT_FILE}"

# Â§ÑÁêÜÊØè‰∏™ÂêéÁ´ØÊñá‰ª∂
counter=1
for backend_file in "${BACKEND_FILES[@]}"; do
    rel_path=$(realpath --relative-to="${BACKEND_DIR}" "$backend_file" 2>/dev/null || python -c "import os; print(os.path.relpath('$backend_file', '${BACKEND_DIR}'))")
    
    echo "Â§ÑÁêÜÊñá‰ª∂ ${counter}/${#BACKEND_FILES[@]}: ${rel_path}"
    
    # ÂÜôÂÖ•Êñá‰ª∂ÂàÜÈöîÊ†áËØÜÂíåÊ∫ê‰ª£Á†Å
    echo "=== ${rel_path} ===" >> "${OUTPUT_FILE}"
    
    # ËØªÂèñÊñá‰ª∂ÂÜÖÂÆπ
    if [ -f "$backend_file" ]; then
        cat "$backend_file" >> "${OUTPUT_FILE}"
    else
        echo "ÈîôËØØÔºöÊó†Ê≥ïËØªÂèñÊñá‰ª∂ ${backend_file}" >> "${OUTPUT_FILE}"
    fi
    
    echo "" >> "${OUTPUT_FILE}"
    echo "" >> "${OUTPUT_FILE}"
    
    ((counter++))
done

echo "‚úÖ ÂêéÁ´ØÊ∫ê‰ª£Á†ÅÊñáÊ°£ÁîüÊàêÂÆåÊàêÔºÅ"
echo "üìÅ ËæìÂá∫Êñá‰ª∂: ${OUTPUT_FILE}"

# ÊòæÁ§∫Êñá‰ª∂Â§ßÂ∞è
if [ -f "${OUTPUT_FILE}" ]; then
    file_size=$(stat -f%z "${OUTPUT_FILE}" 2>/dev/null || stat -c%s "${OUTPUT_FILE}" 2>/dev/null)
    if [ $? -eq 0 ]; then
        if [ $file_size -gt 1048576 ]; then
            size_str="$(echo "scale=2; $file_size / 1048576" | bc) MB"
        elif [ $file_size -gt 1024 ]; then
            size_str="$(echo "scale=2; $file_size / 1024" | bc) KB"
        else
            size_str="${file_size} bytes"
        fi
        echo "üìä Êñá‰ª∂Â§ßÂ∞è: ${size_str}"
    fi
fi

echo ""
echo "============================================================"
echo "ËÑöÊú¨ÊâßË°åÂÆåÊàê"
echo "============================================================"